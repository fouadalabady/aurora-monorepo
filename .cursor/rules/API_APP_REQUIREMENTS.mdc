---
alwaysApply: true
---
# API App Requirements (Aurora Monorepo)

## 1. Product Overview

The Aurora API Application is the backend service for the Aurora monorepo, providing RESTful API endpoints for the public website and content management system. It implements FLUX rules for maintainable architecture, fresh-by-default admin data, and optimized public content delivery while maintaining strict security and validation standards.

## 2. Core Features

### 2.1 Service Management

  price: Float
  category: String!
  featured: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Lead {
  id: ID!
  name: String!
  email: String
  phone: String
  service: String!
  message: String
  status: LeadStatus!
  source: String!
  createdAt: DateTime!
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED
}

type Query {
  services(filter: ServiceFilter, pagination: PaginationInput): [Service!]!
  service(slug: String!): Service
  leads(filter: LeadFilter, pagination: PaginationInput): [Lead!]!
  lead(id: ID!): Lead
}

type Mutation {
  createService(input: CreateServiceInput!): Service!
  updateService(id: ID!, input: UpdateServiceInput!): Service!
  deleteService(id: ID!): Boolean!
  updateLeadStatus(id: ID!, status: LeadStatus!): Lead!
}
```

### 6.3 Resolver Implementation

**Service Resolvers:**
```typescript
export const serviceResolvers = {
  Query: {
    services: async (_, { filter, pagination }, { prisma }) => {
      return await prisma.service.findMany({
        where: filter,
        skip: pagination?.offset || 0,
        take: pagination?.limit || 20,
        orderBy: { createdAt: 'desc' }
      })
    },
    service: async (_, { slug }, { prisma }) => {
      return await prisma.service.findUnique({
        where: { slug }
      })
    }
  },
  Mutation: {
    createService: async (_, { input }, { prisma, user }) => {
      if (user?.role !== 'admin') {
        throw new Error('Admin access required')
      }
      
      const service = await prisma.service.create({ data: input })
      revalidateTag('content:services')
      return service
    }
  }
}
```

## 7. Email & Notifications

### 7.1 Email Service Integration

**Resend Configuration:**
```typescript
import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY)

export async function sendLeadNotification(lead: Lead) {
  await resend.emails.send({
    from: 'Aurora <noreply@aurora.com>',
    to: process.env.ADMIN_EMAIL!,
    subject: `New Lead: ${lead.name}`,
    html: `
      <h2>New Lead Received</h2>
      <p><strong>Name:</strong> ${lead.name}</p>
      <p><strong>Email:</strong> ${lead.email || 'Not provided'}</p>
      <p><strong>Service:</strong> ${lead.service}</p>
      <p><strong>Message:</strong> ${lead.message || 'No message'}</p>
    `
  })
}

export async function sendLeadConfirmation(lead: Lead) {
  if (!lead.email) return
  
  await resend.emails.send({
    from: 'Aurora <noreply@aurora.com>',
    to: lead.email,
    subject: 'Thank you for your inquiry',
    html: `
      <h2>Thank you for contacting Aurora</h2>
      <p>Hi ${lead.name},</p>
      <p>We've received your inquiry about ${lead.service} and will get back to you within 24 hours.</p>
      <p>Best regards,<br>The Aurora Team</p>
    `
  })
}
```

## 8. Deployment & Environment

### 8.1 Vercel Configuration

**vercel.json:**
```json
{
  "framework": "nextjs",
  "buildCommand": "cd ../.. && pnpm build --filter=api",
  "outputDirectory": ".next",
  "installCommand": "cd ../.. && pnpm install",
  "functions": {
    "app/api/**/*.ts": {
      "runtime": "nodejs18.x"
    }
  }
}
```

### 8.2 Environment Variables

**Production Environment:**
```bash
# Database
DATABASE_URL=postgresql://...
DIRECT_URL=postgresql://...

# Authentication
NEXTAUTH_SECRET=your_nextauth_secret
NEXTAUTH_URL=https://aurora-api.vercel.app

# Email Service
RESEND_API_KEY=your_resend_api_key
ADMIN_EMAIL=admin@aurora.com

# Security
RECAPTCHA_SECRET_KEY=your_recaptcha_secret

# File Storage
BLOB_READ_WRITE_TOKEN=your_vercel_blob_token

# Build Configuration
NEXT_TELEMETRY_DISABLED=1
```

### 8.3 Health Monitoring

**Health Check Endpoint:**
```typescript
export const runtime = 'node'
export const dynamic = 'force-dynamic'

export async function GET() {
  try {
    // Test database connection
    await prisma.$queryRaw`SELECT 1`
    
    return new Response(
      JSON.stringify({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        services: {
          database: 'connected',
          api: 'operational'
        }
      }),
      {
        headers: {
          'Cache-Control': 'no-store',
          'Content-Type': 'application/json'
        }
      }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({
        status: 'unhealthy',
        timestamp: new Date().toISOString(),
        error: 'Database connection failed'
      }),
      {
        status: 503,
        headers: {
          'Cache-Control': 'no-store',
          'Content-Type': 'application/json'
        }
      }
    )
  }
}
```

This API application serves as the robust data layer for Aurora, implementing FLUX rules for maintainable architecture, fresh-by-default admin data, and optimized public content delivery while maintaining strict security and validation standards.